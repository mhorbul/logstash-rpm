#!/bin/sh

SCRIPT=$0
LOGSTASH_HOME=$(dirname "$SCRIPT")/..

# make LOGSTASH_HOME absolute
cd "$LOGSTASH_HOME"
LOGSTASH_HOME=$(pwd)

if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA=$JAVA_HOME/bin/java
else
    JAVA=`which java`
fi

LOGSTASH_JAR=$(find "$LOGSTASH_HOME" -name 'logstash-*-monolithic.jar' | tail -1)
if [ ! -f $LOGSTASH_JAR ]
then
   echo "jar file is not found."
   exit 99
fi

function usage() {
  echo "Usage: ${SCRIPT} SERVICE OPTIONS"
  echo "  SERVICE: agent, web"
  echo "  OPTIONS:"
  echo "    -f, --config CONFIGFILE (required)\tLoad the logstash config from a specific file or directory."

  echo "                           \t\tIf a direcory is given instead of a file, all files in that directory will be concatonated in lexicographical order and then parsed as a single config file."
  echo "    -p, --pluginpath PLUGIN_PATH\tA colon-delimited path to find plugins in."
  echo "    -P, --pidfile PIDFILE\t\tPID file path."
  echo "    -l, --logfile LOGFILE\t\tLogfile path."
}

function run_service() {
  service=$1
  config=$2
  pluginpath=$3
  pidfile=$4
  logfile=$5

  if [ "x$logfile" == "x" ]; then
    exec "$JAVA" $JAVA_OPTS -jar $LOGSTASH_JAR $service -f "$config" -p "$pluginpath" $verbose
    rs=$?
  else
    exec "$JAVA" $JAVA_OPTS -jar $LOGSTASH_JAR $service -f "$config" -l "$logfile" -p "$pluginpath" $verbose 2>&1 >> $logfile &
    rs=$?
    [ $rs -eq 0 -a "x$pidfile" != "x" ] && printf '%d' $! > "$pidfile"
  fi

  return $rs
}

service=$1; shift

if [ "${service}" != "agent" -a "${service}" != "web" ]
then
  echo "ERROR: no such service \`${service}'. Available services are: agent, web"
  usage
  exit 99
fi

while test $# -gt 0
do
  case "$1" in
       -V | --version )
                        "$JAVA" -jar $LOGSTASH_JAR --version
                        exit 0
                        ;;
        -f | --config )
                        config="$2"
                        if [ ! -f "$config" -a ! -d "$config"  ]; then
                           echo "ERROR: config file or directory \`$config' does not exist."
                           usage
                           exit 1
                        fi
                        shift 2
                        ;;
    -p | --pluginpath )
                        pluginpath="$2"
                        if [ ! -d "$pluginpath"  ]; then
                           echo "ERROR: config directory \`$pluginpath' does not exist."
                           usage
                           exit 1
                        fi
                        shift 2
                        ;;
       -P | --pidfile )
                        pidfile="$2"
                        shift 2
                        ;;
       -l | --logfile )
                        logfile="$2"
                        shift 2
                        ;;
       -v | --verbose )
                        if [ "$2" == "debug" ]; then
                            verbose="-vv"
                        elif [ "$2" == "info" ]; then
                            verbose="-v"
                        else
                            verbose=""
                        fi
                        shift 2
                        ;;
          -h | --help )
                        usage
                        exit 0
                        ;;
                    * )
                        break
  esac
done

if [ "x$config" == "x" ]; then
  echo "ERROR: config file is required."
  usage
  exit 1
fi

run_service "$service" "$config" "$pluginpath" "$pidfile" "$logfile"

exit $?
